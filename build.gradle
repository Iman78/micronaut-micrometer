buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails:grails-docs:$grailsVersion"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath 'io.github.groovylang.groovydoc:groovydoc-gradle-plugin:1.0.1'
        classpath "io.micronaut.docs:micronaut-docs-asciidoc-extensions:$micronautDocsVersion"
        classpath "io.micronaut.docs:micronaut-docs-gradle-plugins:$micronautDocsVersion"
        classpath "io.spring.nohttp:nohttp-gradle:0.0.2.RELEASE"
    }
}


import groovyx.net.http.RESTClient
import static groovyx.net.http.ContentType.*

plugins {
    id 'com.github.hierynomus.license' version '0.14.0' apply false
}

repositories {
    // mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

version project.projectVersion


ext {
    distInstallDir = file("$buildDir/dist-tmp")
    homeBinDir = file("bin")
    homeLibDir = file("lib")
    homeSrcDir = file("src")
}



subprojects { Project subproject ->

    version project.projectVersion
	group "io.micronaut.configuration"
    ext {
        isConfiguration = subproject.projectDir.parentFile.name == 'configurations'
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
    }

    
    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    
    apply plugin:"groovy"
    apply plugin:"java"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "io.spring.nohttp"

    dependencyManagement {
        imports {
            mavenBom "io.micronaut:micronaut-bom:$micronautVersion"
        }
    }


    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    apply from:"${rootProject.projectDir}/gradle/publishing.gradle"
        

    jar {
        manifest {
            attributes('Automatic-Module-Name': "${subproject.group}.${subproject.name}".replaceAll('[^\\w\\.\\$_]', "_"))
            attributes('Implementation-Version': projectVersion)
            attributes('Implementation-Title': title)
        }
    }

    bintray.publish = true

    tasks.withType(Test) {
        jvmArgs '-Duser.country=US'
        jvmArgs '-Duser.language=en'
        testLogging {
            exceptionFormat = 'full'
        }
        afterSuite {
            System.out.print(".")
            System.out.flush()
        }

        reports.html.enabled = !System.getenv("TRAVIS")
        reports.junitXml.enabled = !System.getenv("TRAVIS")

    }

    configurations {
        documentation
        all {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                String group = details.requested.group
                if(group == 'org.codehaus.groovy') {
                    details.useVersion(groovyVersion)
                }
            }
        }
    }
    dependencies {
        documentation "org.codehaus.groovy:groovy-templates:$groovyVersion"
        documentation "org.codehaus.groovy:groovy-dateutil:$groovyVersion"

        testCompile "cglib:cglib-nodep:2.2.2"
        testCompile "org.objenesis:objenesis:1.4"

        testCompile("org.spockframework:spock-core:${spockVersion}") {
            exclude module:'groovy-all'
        }
        testCompile "cglib:cglib-nodep:2.2.2"
        testCompile "org.objenesis:objenesis:1.4"

        testRuntime "ch.qos.logback:logback-classic:1.2.3"
        testCompile "org.codehaus.groovy:groovy-test:$groovyVersion"
    }

    groovydoc {
        classpath += project.configurations.documentation
    }

    task allDeps(type: DependencyReportTask) {}
    apply plugin: 'checkstyle'

    checkstyle {
        toolVersion = 8.10
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')

        // Per submodule
        maxErrors = 1
        maxWarnings = 10

        showViolations = true
    }

    checkstyleTest.enabled = false
}

apply from:"https://raw.githubusercontent.com/micronaut-projects/micronaut-docs/v1.0.3/gradle/docs.gradle"

allprojects {
    apply plugin: 'idea'

    idea {
        module {
            outputDir file('build/classes/java/main')
            testOutputDir file('build/classes/groovy/test')
        }
    }
    apply from: rootProject.file('gradle/license.gradle')
}

def bintrayUser = System.getenv("BINTRAY_USER") ?: project.hasProperty("bintrayUser") ? project.bintrayUser : ''
def bintrayKey = System.getenv("BINTRAY_KEY") ?: project.hasProperty("bintrayKey") ? project.bintrayKey : ''
def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''

task synchronizeWithMavenCentral() {
    description = "Syncs with Maven Central/Sonatype"
    doLast {
        boolean ongoing = true

        println """
Synchronizing with Maven central. This may take a few minutes ...
If this fails, log on to http://oss.sonatype.org/ using the centralUser credentials
and progress through process manually -> Close -> Publish ... under staging repositories
"""
        // this hack is here to keep Travis from thinking this is 
        // a stalled build
        Thread.start {
            while(ongoing) {                
                sleep 5000        
                println "Still Publishing. Please wait..."
            }
        }
        try {
            try {
                def mavenClent = new RESTClient("https://repo.maven.apache.org/maven2/")
                mavenClent.get(path:"io/micronaut/configuration/micronaut-micrometer-core/$projectVersion/micronaut-micrometer-core-${projectVersion}.jar")
            } catch(groovyx.net.http.HttpResponseException e) {
                // doesn't exist.. try sync
                def client = new RESTClient('https://api.bintray.com/maven_central_sync/micronaut/core-releases-local/')
                client.headers['Authorization'] = 'Basic ' + "$bintrayUser:$bintrayKey".getBytes('iso-8859-1').encodeBase64()
                def body = /{}/
                def resp = client.post(
                        path: "micrometer-core/versions/$projectVersion",
                        body: body,
                        requestContentType: JSON
                )
                assert resp.status == 200
                println resp.data.status
                println resp.data.messages.join('\n')
            }
        } catch (groovyx.net.http.HttpResponseException e) {
            println "Error: $e"
            println "Message: $e.message"
            println "Body: $e.response.data"
            throw e
        } finally {
            ongoing = false
        }
    }
}